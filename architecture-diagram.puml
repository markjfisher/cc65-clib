@startuml BBC Micro C Library Architecture
!theme plain

title BBC Micro C Library Architecture - ROM-based cc65 Implementation

package "cc65-clib Project" as clib_project {
    folder "Source Files" as clib_src {
        component "cc65-clib/src/libsrc/" as clib_libsrc
        note right of clib_libsrc
            📁 bbc/ - BBC-specific functions
            📁 common/ - Standard C library  
            📁 runtime/ - Low-level runtime
        end note
    }
    
    folder "Build Process" as clib_process {
        component "clib_imports.py" as manifest_generator
        note right of manifest_generator
            🔍 Analyzes .info files
            Separates by segment usage:
            • CODE/RODATA → ROM
            • BSS/DATA → Local
        end note
    }
    
    folder "Build Output" as clib_build {
        artifact "clib.rom" as rom_file
        note right of rom_file
            📦 16KB Sideways ROM
            Contains: strlen, abs, memcpy,
            math ops, string functions, etc.
            Located at $8000-$BFFF when active
        end note
        
        artifact "clib_stubs.s" as clib_stubs_generated
        note right of clib_stubs_generated
            📝 Generated stub file:
            _strlen := $999C
            _abs := $93DE
            _memcpy := $9A1F
            etc.
        end note
        
        artifact "rom_functions.manifest" as rom_manifest
        note right of rom_manifest
            📋 508 ROM Functions
            Pure CODE/RODATA only
            _strlen, _abs, _memcpy,
            string functions, math ops, etc.
        end note
        
        artifact "excluded_functions.manifest" as excluded_manifest
        note right of excluded_manifest
            📋 223 Local Functions  
            Need BSS/DATA/state
            _printf, _malloc, _fopen,
            zerobss, heap functions, etc.
        end note
    }
    
    clib_libsrc --> clib_process : "Build with\nmanifest analysis"
    clib_process --> clib_build
    clib_build --> rom_file
    clib_build --> clib_stubs_generated
    clib_build --> rom_manifest
    clib_build --> excluded_manifest
}

package "cc65 Project" as cc65_project {
    folder "BBC-CLIB Source" as bbc_clib_src {
        component "cc65/libsrc/bbc-clib/" as bbc_clib_libsrc
    }
    
    artifact "bbc-clib.lib" as bbc_lib {
        component "crt0.s" as crt0
        component "rom_detect.s" as rom_detect  
        component "clib_stubs.s" as clib_stubs_lib
        component "rom_error.s" as rom_error
        
        folder "Local C Runtime" as local_runtime {
            component "zerobss.s" as zerobss
            component "Other excluded functions" as other_excluded
        }
        
        note right of crt0
            🚀 Startup Code
            • ROM detection & paging
            • C runtime initialization
            • Clean exit (invalidate ROM state)
            • STARTUP segment
        end note
        
        note right of rom_detect
            🔍 ROM Scanner
            • Scans ROM slots 0-15
            • Pages in correct ROM
            • Validates ROM type $82
            • Stores original ROMSEL
        end note
        
        note right of clib_stubs_lib
            🔗 Function Stubs (508 functions)
            • Jump to ROM addresses
            • Copied from cc65-clib build
            • Based on rom_functions.manifest
        end note
        
        note right of local_runtime
            🏠 Local Functions (223 functions)
            • Need BSS/DATA segments
            • zerobss, heap, printf, malloc
            • Based on excluded_functions.manifest
        end note
    }
    
    bbc_clib_libsrc --> bbc_lib : "cc65 build\n(ar65)"
    bbc_lib --> crt0
    bbc_lib --> rom_detect
    bbc_lib --> clib_stubs_lib  
    bbc_lib --> rom_error
    bbc_lib --> local_runtime
}

package "Application Build" as app_build {
    artifact "Application Source" as app_source
    note right of app_source
        📝 simple.s or hello.c
        Contains: main(), application logic
        Uses: strlen(), abs(), printf(), malloc()
    end note
    
    artifact "Application Object" as app_obj
    note right of app_obj
        📦 simple.o
        Compiled but unlinked
    end note
    
    artifact "Final Executable" as app_final
    note right of app_final
        💿 SIMPLE
        Ready to run on BBC Micro
        Contains: app code + startup + stubs + local functions
    end note
    
    app_source --> app_obj : "ca65\n(assemble)"
    app_obj --> app_final : "cl65\n(link)"
    bbc_lib --> app_final : "Links with"
}

package "Runtime Environment" as runtime {
    component "BBC Micro" as bbc_micro {
        component "Sideways ROM Slot" as rom_slot
        component "Application Memory" as app_memory
        
        note right of rom_slot
            🔌 $8000-$BFFF
            One of 16 possible slots
            Paged in by ROMSEL ($FE30)
            Contains 508 ROM functions
        end note
        
        note right of app_memory
            📍 $1900+ (typical)
            Contains application code,
            startup code, and 223 local functions
        end note
    }
}

' Build Dependencies
clib_stubs_generated -.-> clib_stubs_lib : "Copied during\ncc65 build"
rom_manifest -.-> clib_stubs_lib : "Defines which\nfunctions in ROM"
excluded_manifest -.-> local_runtime : "Defines which\nfunctions local"
rom_file -.-> rom_slot : "Must be installed\nat runtime"

' Runtime Flow
app_final --> app_memory : "Loaded by\nBBC Micro OS"
rom_file --> rom_slot : "Installed in\nsideways ROM"

' Execution Flow
app_memory --> rom_slot : "1. crt0 detects & pages ROM"
rom_slot --> app_memory : "2. ROM functions (508) accessible"
app_memory --> rom_slot : "3. App calls ROM functions via stubs"
local_runtime --> app_memory : "4. Local functions (223) in app memory"

' Styling
skinparam component {
    BackgroundColor lightblue
    BorderColor black
}

skinparam artifact {
    BackgroundColor lightgreen
    BorderColor black
}

skinparam package {
    BackgroundColor lightyellow
    BorderColor black
}

skinparam folder {
    BackgroundColor lightcyan
    BorderColor black
}

skinparam note {
    BackgroundColor wheat
    BorderColor brown
}

@enduml
